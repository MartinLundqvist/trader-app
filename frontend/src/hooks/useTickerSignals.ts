import {
  QueryFunctionContext,
  QueryKey,
  useQuery,
} from '@tanstack/react-query';
import { useTrader } from '../contexts/TraderContext';

// Generated by https://quicktype.io

export interface TickerSignal {
  id: string;
  symbol: string;
  Close: number;
  Open: number;
  High: number;
  Low: number;
  Volume: number;
  BB_high: number;
  BB_low: number;
  SMA_slow: number;
  SMA_fast: number;
  Signal: string;
  Limit: null;
  Stop_loss: null;
  Take_profit: null;
  date: string;
}

// const getTickerSignals = async (
//   strategy: string,
//   ticker: string
// ): Promise<TickerSignal[]> => {
//   if (strategy === '' || ticker === '')
//     throw new Error('Strategy or ticker is empty');

//   const url = import.meta.env.VITE_API_URL;
//   const response = await fetch(`${url}/signals/${strategy}/${ticker}`);

//   if (!response.ok) throw new Error('Error calling API');

//   const data = response.json<TickerSignal[]>();
//   return data as TickerSignal[];
// };

const getTickerSignals = async ({ queryKey }: QueryFunctionContext) => {
  const [_, strategy, ticker] = queryKey;

  if (strategy === '' || ticker === '')
    return Promise.reject(new Error('Strategy or ticker is empty'));

  const url = import.meta.env.VITE_API_URL;

  const response = await fetch(`${url}/tickerdata/${strategy}/${ticker}`);
  if (!response.ok) throw new Error('Error calling API');

  return response.json() as Promise<TickerSignal[]>;

  // return axios
  //   .get<TickerSignal[]>(`${url}/tickerdata/${strategy}/${ticker}`)
  //   .then((response) => response.data);
};

export const useTickerSignals = () => {
  // const queryClient = useQueryClient();
  const { strategy, ticker } = useTrader();

  const { data, isLoading, error } = useQuery<TickerSignal[], Error>({
    queryKey: ['signals', strategy, ticker],
    queryFn: getTickerSignals,
  });

  return { tickerSignals: data, isLoading, error };
};
